# cryptobot_telegram_bot.py
# Telegram bot: webhook + health ping + self-ping for Render free tier
# Requirements (requirements.txt):
#   python-telegram-bot[job-queue,webhooks]==21.6
#   httpx~=0.27
# Env:
#   TELEGRAM_BOT_TOKEN           - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
#   TELEGRAM_CHAT_ID             - –≥–ª–∞–≤–Ω—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å (–∫–∞–Ω–∞–ª/—á–∞—Ç)
#   ALLOWED_CHAT_IDS             - CSV: —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö chat_id
#   RENDER_EXTERNAL_URL / PUBLIC_URL (Render —Å–∞–º –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤–æ–µ)
#   PORT                         - Render –∑–∞–¥–∞—ë—Ç –ø–æ—Ä—Ç –¥–ª—è –≤–µ–±—Å–µ—Ä–≤–∏—Å–∞
#   (–æ–ø—Ü.) WEBHOOK_PATH          - –ø—É—Ç—å –≤–µ–±—Ö—É–∫–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é /wh-<token_prefix>
#   (–æ–ø—Ü.) HEALTH_INTERVAL_SEC   - –∏–Ω—Ç–µ—Ä–≤–∞–ª "üü¢ online" (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1200 = 20 –º–∏–Ω)
#   (–æ–ø—Ü.) SELF_PING_ENABLED     - "1"/"0" (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
#   (–æ–ø—Ü.) SELF_PING_INTERVAL_SEC- –∏–Ω—Ç–µ—Ä–≤–∞–ª self-ping (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 780 ‚âà 13 –º–∏–Ω)
#   (–æ–ø—Ü.) SELF_PING_URL         - –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–∏–Ω–≥–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π URL
#   (–æ–ø—Ü.) SELF_PING_PATH        - –µ—Å–ª–∏ SELF_PING_URL –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º PUBLIC_URL + PATH (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "/")
#
# –ö–æ–º–∞–Ω–¥—ã:
#   /start  /ping

from __future__ import annotations
import os
import asyncio
import logging
from typing import List, Set

import httpx
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format="%(levelname)s %(message)s"
)
log = logging.getLogger("cryptobot")

# -------------------- Config helpers --------------------

def parse_int_list(csv: str) -> List[int]:
    out = []
    for part in (csv or "").split(","):
        s = part.strip()
        if not s:
            continue
        try:
            out.append(int(s))
        except ValueError:
            pass
    return out

def getenv_int(name: str, default: int) -> int:
    try:
        return int(os.getenv(name, str(default)))
    except Exception:
        return default

# -------------------- Env --------------------

BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise SystemExit("TELEGRAM_BOT_TOKEN is required.")

primary_chat_raw = os.environ.get("TELEGRAM_CHAT_ID", "").strip()
ALLOWED_CHAT_IDS: Set[int] = set(parse_int_list(os.environ.get("ALLOWED_CHAT_IDS", "")))
PRIMARY_RECIPIENTS: List[int] = []

if primary_chat_raw:
    try:
        cid = int(primary_chat_raw)
        # –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫—Ç–æ –µ—Å—Ç—å –≤ whitelist
        if cid in ALLOWED_CHAT_IDS:
            PRIMARY_RECIPIENTS.append(cid)
    except ValueError:
        pass

PUBLIC_URL = os.environ.get("PUBLIC_URL") or os.environ.get("RENDER_EXTERNAL_URL") or ""
PORT = getenv_int("PORT", getenv_int("HTTP_PORT", 10000))
token_prefix = BOT_TOKEN.split(":")[0] if ":" in BOT_TOKEN else BOT_TOKEN[:8]
WEBHOOK_PATH = os.environ.get("WEBHOOK_PATH", f"/wh-{token_prefix[:8]}")
WEBHOOK_URL = (PUBLIC_URL.rstrip("/") + WEBHOOK_PATH) if PUBLIC_URL else ""

HEALTH_INTERVAL_SEC = getenv_int("HEALTH_INTERVAL_SEC", 1200)  # 20 –º–∏–Ω—É—Ç
SELF_PING_ENABLED = os.environ.get("SELF_PING_ENABLED", "1").lower() not in {"0", "false", "no"}
SELF_PING_INTERVAL_SEC = getenv_int("SELF_PING_INTERVAL_SEC", 780)  # ~13 –º–∏–Ω—É—Ç
SELF_PING_URL = os.environ.get("SELF_PING_URL", "").strip()
SELF_PING_PATH = os.environ.get("SELF_PING_PATH", "/")

if not SELF_PING_URL and PUBLIC_URL:
    SELF_PING_URL = PUBLIC_URL.rstrip("/") + SELF_PING_PATH

log.info("[cfg] ALLOWED_CHAT_IDS=%s", sorted(ALLOWED_CHAT_IDS))
log.info("[cfg] PRIMARY_RECIPIENTS=%s", PRIMARY_RECIPIENTS)
log.info("[cfg] PUBLIC_URL='%s' PORT=%s WEBHOOK_PATH='%s'", PUBLIC_URL, PORT, WEBHOOK_PATH)
log.info("[cfg] HEALTH_INTERVAL_SEC=%s", HEALTH_INTERVAL_SEC)
log.info("[cfg] SELF_PING_ENABLED=%s SELF_PING_INTERVAL_SEC=%s SELF_PING_URL='%s'",
         SELF_PING_ENABLED, SELF_PING_INTERVAL_SEC, SELF_PING_URL or "(disabled)")

# -------------------- Access control --------------------

def is_allowed(update: Update) -> bool:
    """–†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –∏–∑ whitelisted —á–∞—Ç–æ–≤."""
    cid = None
    if update.effective_chat:
        cid = update.effective_chat.id
    return (cid in ALLOWED_CHAT_IDS) if cid is not None else False

async def guard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if is_allowed(update):
        return True
    # –ú–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —á—É–∂–∞–∫–æ–≤
    return False

# -------------------- Handlers --------------------

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not await guard(update, context):
        return
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–∏–≤–µ—Ç! –Ø –æ–Ω–ª–∞–π–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

async def cmd_ping(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not await guard(update, context):
        return
    await context.bot.send_message(chat_id=update.effective_chat.id, text="üü¢ online")

# -------------------- Jobs (JobQueue) --------------------

async def job_health(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π '—è –∂–∏–≤' ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ whitelisted –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º."""
    for chat_id in PRIMARY_RECIPIENTS:
        try:
            await context.bot.send_message(chat_id=chat_id, text="üü¢ online", disable_notification=True)
        except Exception as e:
            log.warning("[health] send to %s failed: %s", chat_id, repr(e))

async def job_self_ping(context: ContextTypes.DEFAULT_TYPE) -> None:
    """Self-ping: –¥–µ—Ä–≥–∞–µ–º —Å–≤–æ–π URL, —á—Ç–æ–±—ã Render —Å—á–∏—Ç–∞–ª —Å–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–Ω—ã–º."""
    url = SELF_PING_URL
    if not (SELF_PING_ENABLED and url):
        return
    try:
        timeout = httpx.Timeout(8.0, connect=4.0)
        async with httpx.AsyncClient(timeout=timeout, follow_redirects=True) as client:
            resp = await client.get(url)
            log.debug("[self-ping] %s -> %s", url, resp.status_code)
    except Exception as e:
        log.warning("[self-ping] %s failed: %s", url, repr(e))

# -------------------- App bootstrap --------------------

def build_application() -> Application:
    app = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("ping", cmd_ping))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    if app.job_queue is None:
        log.warning("JobQueue –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞–∫–µ—Ç 'python-telegram-bot[job-queue]'.")
    else:
        # Health every HEALTH_INTERVAL_SEC, —Å—Ç–∞—Ä—Ç—É–µ–º —á–µ—Ä–µ–∑ —Ç—É –∂–µ –ø–∞—É–∑—É
        app.job_queue.run_repeating(job_health, interval=HEALTH_INTERVAL_SEC, first=HEALTH_INTERVAL_SEC)
        # Self-ping –∫–∞–∂–¥—ã–µ ~13 –º–∏–Ω—É—Ç (–∏–ª–∏ –∏–∑ ENV), —Å—Ç–∞—Ä—Ç ‚Äî —á–µ—Ä–µ–∑ 60 —Å–µ–∫ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞,
        # —á—Ç–æ–±—ã —É—Å–ø–µ–ª –ø–æ–¥–Ω—è—Ç—å—Å—è –≤–µ–±—Å–µ—Ä–≤–µ—Ä/–≤–µ–±—Ö—É–∫.
        if SELF_PING_ENABLED and SELF_PING_URL:
            app.job_queue.run_repeating(job_self_ping, interval=SELF_PING_INTERVAL_SEC, first=60)

    return app

def main():
    app = build_application()

    if not PUBLIC_URL:
        # Fallback –Ω–∞ polling (–ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ Render), –Ω–æ –ª—É—á—à–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤—Å–µ–≥–¥–∞ WEBHOOK.
        log.warning("PUBLIC_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞—é polling-—Ä–µ–∂–∏–º (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤).")
        app.run_polling(allowed_updates=Update.ALL_TYPES)
        return

    # –ß–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ (–µ—Å–ª–∏ –±—ã–ª), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.
    # Drop pending updates ‚Äî —Ç–∞–∫ –Ω–µ –ø–æ–¥—Ç—è–Ω—É—Ç—Å—è —Å—Ç–∞—Ä—ã–µ –æ—á–µ—Ä–µ–¥–∏.
    log.info("–£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–π webhook (–µ—Å–ª–∏ –±—ã–ª) –∏ —Å–±—Ä–∞—Å—ã–≤–∞—é pending updates‚Ä¶")
    # NB: –≤ run_webhook –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å webhook_url, PTB —Å–∞–º –ø–æ—Å—Ç–∞–≤–∏—Ç —Ö—É–∫. –ù–æ —è–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ ‚Äî –ø–æ–ª–µ–∑–Ω–∞.
    app.bot.delete_webhook(drop_pending_updates=True)

    # Webhook-—Å–µ—Ä–≤–µ—Ä PTB (tornado) —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—É—Ç–∏.
    # –õ—é–±—ã–µ GET –∫ –∫–æ—Ä–Ω—é ("/") –≤–µ—Ä–Ω—É—Ç 404, –Ω–æ —ç—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è self-ping,
    # –∞ POST –Ω–∞ WEBHOOK_PATH –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–ø–¥–µ–π—Ç—ã –æ—Ç Telegram.
    log.info("–°—Ç–∞—Ä—Ç—É—é webhook-—Å–µ—Ä–≤–µ—Ä: listen=0.0.0.0 port=%s path=%s url=%s", PORT, WEBHOOK_PATH, WEBHOOK_URL)
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=WEBHOOK_PATH,
        webhook_url=WEBHOOK_URL,           # Telegram –±—É–¥–µ—Ç —Å–ª–∞—Ç—å POST —Å—é–¥–∞
        allowed_updates=Update.ALL_TYPES,
        stop_signals=None,                 # –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
    )

if __name__ == "__main__":
    main()
